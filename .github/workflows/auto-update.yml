name: Auto Update Submodules

on:
  schedule:
    - cron: '0 0 * * *' # every day at midnight UTC
  workflow_dispatch:

jobs:
  update-submodules:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout meta-repo
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest submodules
        run: |
          git submodule update --remote --merge

      - name: Fetch releases for each submodule
        id: fetch_releases
        run: |
          echo "Fetching releases..."
          RELEASES_CHANGED=false
          REPO_DATA=""
          
          # Create releases directory if it doesn't exist
          mkdir -p releases

          for submodule in $(git config --file .gitmodules --get-regexp path | awk '{ print $2 }'); do
            # Remove the 'marketplace/' prefix from the submodule name
            submodule_name=$(echo "$submodule" | sed 's/^marketplace\///')

            echo "Fetching releases for $submodule_name"
            # Get the latest tag or release using GitHub API
            API_URL="https://api.github.com/repos/DockFusion-Marketplace/$submodule_name/releases"
            RESPONSE=$(curl -s $API_URL)
            TAGS=$(echo "$RESPONSE" | jq '[.[].tag_name]')
            LAST_RELEASE=$(echo "$TAGS" | jq -r '.[0]')
            
            # Check if the release has changed
            CURRENT_RELEASE_FILE="releases/$submodule_name-release.txt"
            if [[ -f "$CURRENT_RELEASE_FILE" ]]; then
              LAST_KNOWN_RELEASE=$(cat "$CURRENT_RELEASE_FILE")
              if [[ "$LAST_RELEASE" != "$LAST_KNOWN_RELEASE" ]]; then
                RELEASES_CHANGED=true
                echo "$submodule_name release changed to $LAST_RELEASE"
              fi
            else
              RELEASES_CHANGED=true
              echo "$submodule_name first release is $LAST_RELEASE"
            fi

            # Save the releases info into the JSON structure
            REPO_DATA+="{\"repo\": \"$submodule_name\", \"releases\": $TAGS, \"last_release\": \"$LAST_RELEASE\"},"
            echo "$LAST_RELEASE" > "$CURRENT_RELEASE_FILE"
          done
          
          # Remove trailing comma from JSON
          REPO_DATA=$(echo $REPO_DATA | sed 's/,$//')

          # Save the JSON data to file
          echo "{\"submodules\": [$REPO_DATA]}" > submodule_releases.json
          echo "RELEASES_CHANGED=$RELEASES_CHANGED" >> $GITHUB_ENV

      - name: Exit if no releases changed
        if: env.RELEASES_CHANGED == 'false'
        run: echo "No changes in submodule releases. Skipping release." && exit 0

      - name: Create new tag
        if: env.RELEASES_CHANGED == 'true'
        run: |
          TAG=release-$(date +%Y%m%d%H%M%S)
          git tag "$TAG"
          git push origin "$TAG"
          echo "TAG_NAME=$TAG" >> $GITHUB_ENV

      - name: Commit submodule updates and new release information
        if: env.RELEASES_CHANGED == 'true'
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Updated submodules and created release tag ${{ env.TAG_NAME }}"
          git push

      - name: Create a new release
        id: create_release
        uses: softprops/action-gh-release@v1
        if: env.RELEASES_CHANGED == 'true'
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: "Release ${{ env.TAG_NAME }}"
          body: |
            Submodule updates included in this release:
            ${{ steps.current-shas.outputs.sha_list }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload submodule_releases.json to release
        uses: actions/upload-release-asset@v1
        if: env.RELEASES_CHANGED == 'true'
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./submodule_releases.json
          asset_name: submodule_releases.json
          asset_content_type: application/json